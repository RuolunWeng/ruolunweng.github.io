//#################################### float.lib ########################################
// A library to handle float specific code in Faust.
//########################################################################################

/************************************************************************
************************************************************************
FAUST library file
Copyright (C) 2019 GRAME, Centre National de Creation Musicale
----------------------------------------------------------------------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with the GNU C Library; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a
larger FAUST program which directly or indirectly imports this library
file and still distribute the compiled code generated by the FAUST
compiler, or a modified version of this compiled code, under your own
copyright and license. This EXCEPTION TO THE LGPL LICENSE explicitly
grants you the right to freely choose the license for the resulting
compiled code. In particular the resulting compiled code has no obligation
to be LGPL or GPL. For example you are free to choose a commercial or
closed source license or any other license if you decide so.
************************************************************************
************************************************************************/

declare name "Faust float Library";
declare version "0.1";

/* 
Simple index signal that is not precise enough in float (OK in double)
raise(trig, step, length) = (+(step):*(reset(trig)))~_ with { reset(trig) = (trig-trig') <= 0; };
*/

/*
The 'idv' parameter is to be used as a read index. In -float mode, we use a technique with a
pure integer index with a fractional part in [0,1] range, to avoid accumulating errors.
The following 3 functions allow to adapt a 'single signal' fractional idv in this [idx, dv] model.
*/

int_part(idv) = idv : _,!;
frac_part(idv) = idv : !,_;
make_idv(id) = int(id), ma.frac(id);

reset(trig) = (trig-trig') <= 0;

// Infinite raising index
raise(trig, step, length) = id, dv
letrec {
    'id = (id + int(step) + int(dv + ma.frac(step))) * reset(trig);
    'dv = ma.frac(dv + ma.frac(step)) * reset(trig);
};

// Modulo based raising index
raise_modulo(trig, step, length) = id, dv
letrec {
    'id = fmod(id + int(step) + int(dv + ma.frac(step)), length) * reset(trig);
    'dv = ma.frac(dv + ma.frac(step)) * reset(trig);
};

// Decreasing index starting at 'length'
decrease(trig, step, length) = raise(trig, -step, length) : (+(length), _);

// Modulo decreasing index starting at 'length'
decrease_modulo(trig, step, length) = raise_modulo(trig, -step, length) : (+(length), _);
